-- Drop everything first (in correct dependency order)
DROP TABLE IF EXISTS appointment_service CASCADE;
DROP TABLE IF EXISTS payment_info CASCADE;
DROP TABLE IF EXISTS bill CASCADE;
DROP TABLE IF EXISTS appointment CASCADE;
DROP TABLE IF EXISTS promotion CASCADE;
DROP TABLE IF EXISTS review CASCADE;
DROP TABLE IF EXISTS service CASCADE;
DROP TABLE IF EXISTS category CASCADE;
DROP TABLE IF EXISTS opening_hours CASCADE;
DROP TABLE IF EXISTS employee CASCADE;
DROP TABLE IF EXISTS client CASCADE;
DROP TABLE IF EXISTS notification CASCADE;
DROP TABLE IF EXISTS branch CASCADE;
DROP TABLE IF EXISTS social_network CASCADE;
DROP TABLE IF EXISTS beauty_salon CASCADE;
DROP TABLE IF EXISTS user_roles CASCADE;
DROP TABLE IF EXISTS role_permissions CASCADE;
DROP TABLE IF EXISTS employee_schedule CASCADE;
DROP TABLE IF EXISTS specialty CASCADE;
DROP TABLE IF EXISTS image CASCADE;
DROP TABLE IF EXISTS file CASCADE;
DROP TABLE IF EXISTS user_profile CASCADE;
-- Replace user with user_profile
DROP TYPE IF EXISTS appointment_status CASCADE;
DROP TYPE IF EXISTS week_day CASCADE;
DROP TYPE IF EXISTS permission CASCADE;
DROP TYPE IF EXISTS role CASCADE;
DROP TYPE IF EXISTS expertise_level CASCADE;
DROP TYPE IF EXISTS payment_method CASCADE;
-- Create ENUMs
CREATE TYPE payment_method AS ENUM (
  'CASH',
  'CREDIT_CARD',
  'DEBIT_CARD',
  'BANK_TRANSFER',
  'BANK_TRANSFER_QR'
);
CREATE TYPE expertise_level AS ENUM ('BEGINNER', 'INTERMEDIATE', 'SENIOR');
CREATE TYPE role AS ENUM ('MEMBER', 'OWNER', 'ADMIN', 'EMPLOYEE');
CREATE TYPE permission AS ENUM (
  'MANAGE_EMPLOYEES',
  'MANAGE_CLIENTS',
  'MANAGE_SERVICES',
  'MANAGE_APPOINTMENTS',
  'MANAGE_PROMOTIONS',
  'MANAGE_SALONS',
  'MANAGE_BRANCHES'
);
CREATE TYPE week_day AS ENUM (
  'MONDAY',
  'TUESDAY',
  'WEDNESDAY',
  'THURSDAY',
  'FRIDAY',
  'SATURDAY',
  'SUNDAY'
);
CREATE TYPE appointment_status AS ENUM (
  'REQUESTED',
  'PENDING',
  'CONFIRMED',
  'CANCELLED',
  'COMPLETED'
);
-- Create user profile to store additional user info
CREATE TABLE user_profile (
  user_id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  surname TEXT NOT NULL,
  phone_number TEXT NOT NULL,
  legal_id TEXT NOT NULL UNIQUE,
  address TEXT NOT NULL,
  sex TEXT NOT NULL,
  birth_date TIMESTAMP(3) NOT NULL,
  role role NOT NULL DEFAULT 'OWNER',
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL
);
CREATE TABLE user_roles (
  id BIGSERIAL PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  role role NOT NULL,
  UNIQUE(user_id, role)
);
CREATE TABLE role_permissions (
  id BIGSERIAL PRIMARY KEY,
  role role NOT NULL,
  permissions permission NOT NULL,
  UNIQUE(role, permissions)
);
CREATE TABLE beauty_salon (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  address TEXT NOT NULL,
  phone TEXT NOT NULL,
  email TEXT NOT NULL UNIQUE,
  description TEXT NOT NULL,
  logo_uri TEXT NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  owner_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE
);
CREATE TABLE social_network (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  url TEXT NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  salon_id INTEGER NOT NULL REFERENCES beauty_salon(id)
);
CREATE TABLE branch (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  address TEXT NOT NULL,
  phone TEXT NOT NULL,
  email TEXT NOT NULL UNIQUE,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  salon_id INTEGER NOT NULL REFERENCES beauty_salon(id)
);
CREATE TABLE client (
  id SERIAL PRIMARY KEY,
  is_loyal BOOLEAN NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE
);
CREATE TABLE employee (
  id SERIAL PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  bio TEXT NOT NULL,
  start_date TIMESTAMP(3) NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  branch_id INTEGER NOT NULL REFERENCES branch(id)
);
CREATE TABLE opening_hours (
  id SERIAL PRIMARY KEY,
  day week_day NOT NULL,
  open_time TEXT NOT NULL,
  close_time TEXT NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  branch_id INTEGER NOT NULL REFERENCES branch(id)
);
CREATE TABLE category (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL
);
CREATE TABLE service (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  price DECIMAL(65, 30) NOT NULL,
  duration INTEGER NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  branch_id INTEGER NOT NULL REFERENCES branch(id),
  category_id INTEGER NOT NULL REFERENCES category(id)
);
CREATE TABLE notification (
  id SERIAL PRIMARY KEY,
  message TEXT NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE
);
CREATE TABLE review (
  id SERIAL PRIMARY KEY,
  rating DOUBLE PRECISION NOT NULL,
  comment TEXT NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  client_id INTEGER NOT NULL REFERENCES client(id),
  service_id INTEGER NOT NULL REFERENCES service(id)
);
CREATE TABLE promotion (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  discount DOUBLE PRECISION NOT NULL,
  start_date TIMESTAMP(3) NOT NULL,
  end_date TIMESTAMP(3) NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  service_id INTEGER NOT NULL REFERENCES service(id)
);
CREATE TABLE appointment (
  id SERIAL PRIMARY KEY,
  date TIMESTAMP(3) NOT NULL,
  note TEXT NOT NULL,
  status appointment_status NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  client_id INTEGER NOT NULL REFERENCES client(id),
  employee_id INTEGER NOT NULL REFERENCES employee(id),
  branch_id INTEGER NOT NULL REFERENCES branch(id)
);
CREATE TABLE appointment_service (
  id SERIAL PRIMARY KEY,
  price DECIMAL(65, 30) NOT NULL,
  quantity INTEGER NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  appointment_id INTEGER NOT NULL REFERENCES appointment(id),
  service_id INTEGER NOT NULL REFERENCES service(id)
);
CREATE TABLE payment_info (
  id SERIAL PRIMARY KEY,
  method payment_method NOT NULL,
  amount DECIMAL(65, 30) NOT NULL,
  card_number TEXT NOT NULL,
  card_holder TEXT NOT NULL,
  expiration_date TEXT NOT NULL,
  security_code TEXT NOT NULL,
  bank TEXT NOT NULL,
  account_number TEXT NOT NULL,
  account_holder TEXT NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL,
  appointment_id INTEGER NOT NULL REFERENCES appointment(id)
);
CREATE TABLE bill (
  id SERIAL PRIMARY KEY,
  payment_id INTEGER NOT NULL,
  date TIMESTAMP(3) NOT NULL,
  nit TEXT NOT NULL,
  name TEXT NOT NULL,
  surname TEXT NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL
);
CREATE TABLE specialty (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL
);
CREATE TABLE employee_schedule (
  id SERIAL PRIMARY KEY,
  day TEXT NOT NULL,
  start_time TEXT NOT NULL,
  end_time TEXT NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL
);
CREATE TABLE image (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  uri TEXT NOT NULL,
  content_type TEXT NOT NULL,
  size TEXT NOT NULL
);
CREATE TABLE file (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  uri TEXT NOT NULL,
  content_type TEXT NOT NULL,
  size TEXT NOT NULL,
  created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(3) NOT NULL
);
-- Enable row level security for all tables
ALTER TABLE beauty_salon ENABLE ROW LEVEL SECURITY;
ALTER TABLE social_network ENABLE ROW LEVEL SECURITY;
ALTER TABLE branch ENABLE ROW LEVEL SECURITY;
ALTER TABLE client ENABLE ROW LEVEL SECURITY;
ALTER TABLE employee ENABLE ROW LEVEL SECURITY;
ALTER TABLE opening_hours ENABLE ROW LEVEL SECURITY;
ALTER TABLE category ENABLE ROW LEVEL SECURITY;
ALTER TABLE service ENABLE ROW LEVEL SECURITY;
ALTER TABLE notification ENABLE ROW LEVEL SECURITY;
ALTER TABLE review ENABLE ROW LEVEL SECURITY;
ALTER TABLE promotion ENABLE ROW LEVEL SECURITY;
ALTER TABLE appointment ENABLE ROW LEVEL SECURITY;
ALTER TABLE appointment_service ENABLE ROW LEVEL SECURITY;
ALTER TABLE payment_info ENABLE ROW LEVEL SECURITY;
ALTER TABLE bill ENABLE ROW LEVEL SECURITY;
ALTER TABLE specialty ENABLE ROW LEVEL SECURITY;
ALTER TABLE employee_schedule ENABLE ROW LEVEL SECURITY;
ALTER TABLE image ENABLE ROW LEVEL SECURITY;
ALTER TABLE file ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_profile ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE role_permissions ENABLE ROW LEVEL SECURITY;
-- Create policies for all tables
CREATE POLICY "Users can insert their own salons" ON beauty_salon FOR
INSERT WITH CHECK (auth.uid() = owner_id);