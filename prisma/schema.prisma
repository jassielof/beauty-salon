generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Payment Management
enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  BANK_TRANSFER_QR
}

model PaymentInfo {
  id             Int           @id @default(autoincrement())
  method         PaymentMethod
  amount         Decimal
  cardNumber     String
  cardHolder     String
  expirationDate String
  securityCode   String
  bank           String
  accountNumber  String
  accountHolder  String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointmentId  Int
  Appointment    Appointment   @relation(fields: [appointmentId], references: [id])
}

model Bill {
  id        Int      @id @default(autoincrement())
  paymentId Int
  date      DateTime
  nit       String
  name      String
  surname   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Employee Management
enum ExpertiseLevel {
  BEGINNER
  INTERMEDIATE
  SENIOR
}

model Specialty {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmployeeSchedule {
  id        Int      @id @default(autoincrement())
  day       String
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Authentication
enum Role {
  CLIENT
  OWNER
  ADMIN
  EMPLOYEE
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  surname      String
  phoneNumber  String
  legalId      String         @unique
  address      String
  sex          String
  birthDate    DateTime
  role         Role
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Clients      Client[]
  Employees    Employee[]
  BeautySalon  BeautySalon[]
  Notification Notification[]
}

model Client {
  id          Int           @id @default(autoincrement())
  isLoyal     Boolean
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      Int
  User        User          @relation(fields: [userId], references: [id])
  Review      Review[]
  Appointment Appointment[]
}

model Employee {
  id          Int           @id @default(autoincrement())
  userId      Int
  bio         String
  startDate   DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  branchId    Int
  Branch      Branch        @relation(fields: [branchId], references: [id])
  User        User          @relation(fields: [userId], references: [id])
  Appointment Appointment[]
}

model Image {
  id          Int    @id @default(autoincrement())
  name        String
  uri         String
  contentType String
  size        String
}

// Salon Management
model BeautySalon {
  id            Int             @id @default(autoincrement())
  name          String
  address       String
  phone         String
  email         String          @unique
  description   String
  logoUri       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ownerId       Int
  Owner         User            @relation(fields: [ownerId], references: [id])
  Branch        Branch[]
  SocialNetwork SocialNetwork[]
}

model SocialNetwork {
  id          Int         @id @default(autoincrement())
  name        String
  url         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  salonId     Int
  BeautySalon BeautySalon @relation(fields: [salonId], references: [id])
}

model Branch {
  id           Int            @id @default(autoincrement())
  name         String
  address      String
  phone        String
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  salonId      Int
  Salon        BeautySalon    @relation(fields: [salonId], references: [id])
  Employee     Employee[]
  OpeningHours OpeningHours[]
  Service      Service[]
  Appointment  Appointment[]
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model OpeningHours {
  id        Int      @id @default(autoincrement())
  day       WeekDay
  openTime  String
  closeTime String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branchId  Int
  Branch    Branch   @relation(fields: [branchId], references: [id])
}

// Service Management
model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clientId  Int
  Client    Client   @relation(fields: [clientId], references: [id])
  serviceId Int
  Service   Service  @relation(fields: [serviceId], references: [id])
}

model Service {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String
  price              Decimal
  duration           Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  branchId           Int
  Branch             Branch               @relation(fields: [branchId], references: [id])
  categoryId         Int
  Category           Category             @relation(fields: [categoryId], references: [id])
  Review             Review[]
  Promotion          Promotion[]
  AppointmentService AppointmentService[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Service     Service[]
}

model Promotion {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  discount    Float
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  serviceId   Int
  Service     Service  @relation(fields: [serviceId], references: [id])
}

// Appointment Management
enum AppointmentStatus {
  REQUESTED
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Appointment {
  id                 Int                  @id @default(autoincrement())
  date               DateTime
  note               String
  status             AppointmentStatus
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  clientId           Int
  Client             Client               @relation(fields: [clientId], references: [id])
  employeeId         Int
  Employee           Employee             @relation(fields: [employeeId], references: [id])
  branchId           Int
  Branch             Branch               @relation(fields: [branchId], references: [id])
  PaymentInfo        PaymentInfo[]
  AppointmentService AppointmentService[]
}

model AppointmentService {
  id            Int         @id @default(autoincrement())
  price         Decimal
  quantity      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointmentId Int
  serviceId     Int
  Appointment   Appointment @relation(fields: [appointmentId], references: [id])
  Service       Service     @relation(fields: [serviceId], references: [id])
}

// File Management
model File {
  id          Int      @id @default(autoincrement())
  name        String
  uri         String
  contentType String
  size        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
